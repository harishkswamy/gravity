<?xml version="1.0"?>
<!--
    Copyright 2004 The Apache Software Foundation
    
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!-- $Id: common-build.xml,v 1.5 2004-09-02 03:48:53 harishkswamy Exp $ -->
<project name="common-build" basedir="." default="coverage">

	<!-- ========== Executable Targets ======================================== -->

	<target name="pre-init" />

	<target name="init" description="Initialize environment" depends="pre-init">

		<!-- read properties from the build.properties, if any -->

		<property file="build.properties" />

		<property name="src.dir" value="src" />

		<property name="main.src.dir" value="${src.dir}/main" />
		<property name="test.src.dir" value="${src.dir}/test" />

		<property name="lib.dir" value="lib" />

		<property name="build.dir" value="build" />

		<property name="main.build.dir" value="${build.dir}/main" />
		<property name="test.build.dir" value="${build.dir}/test" />

		<property name="main.classes.dir" value="${main.build.dir}/classes" />
		<property name="test.classes.dir" value="${test.build.dir}/classes" />

		<property name="test.results.dir" value="${test.build.dir}/results" />

		<!--property name="build.compiler" value="javac1.3" /-->
		<property name="compile.debug" value="true" />
		<property name="compile.deprecation" value="true" />
		<property name="compile.optimize" value="true" />

		<property name="docs.src.dir" value="docs" />
		<property name="manual.src.dir" value="${docs.src.dir}/manual" />

		<property name="coverage.build.dir" value="${test.build.dir}/coverage" />
		<property name="coverage.classes.dir" value="${coverage.build.dir}/classes" />
		<property name="coverage.db.dir" value="${coverage.build.dir}/db" />

		<property name="docs.build.dir" value="${build.dir}/docs" />

		<property name="manual.build.dir" value="${docs.build.dir}/manual" />

		<property name="dist.dir" value="dist" />

		<path id="lib.classpath">
			<fileset dir="${lib.dir}" includes="*.jar" />
		</path>

		<path id="main.srcpath">
			<pathelement path="${main.src.dir}" />
		</path>

		<path id="main.classpath">
			<path refid="lib.classpath" />
			<pathelement path="${main.classes.dir}" />
		</path>

		<path id="test.srcpath">
			<pathelement path="${test.src.dir}" />
		</path>

		<path id="test.classpath">
			<path refid="main.classpath" />
			<pathelement path="${test.classes.dir}" />
		</path>

		<antcall target="post-init" />
	</target>

	<target name="post-init" />

	<target name="pre-clean" />

	<target name="clean" description="Cleanup the build space" depends="init, pre-clean">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
		<delete dir="${docs.build.dir}" />

		<antcall target="post-clean" />
	</target>

	<target name="post-clean" />

	<target name="pre-set-up" />

	<target name="set-up" description="Prepare build space" depends="init, pre-set-up">
		<mkdir dir="${main.classes.dir}" />
		<mkdir dir="${test.classes.dir}" />
		<mkdir dir="${test.results.dir}" />

		<mkdir dir="${coverage.classes.dir}" />
		<mkdir dir="${coverage.db.dir}" />

		<antcall target="post-set-up" />
	</target>

	<target name="post-set-up" />

	<macrodef name="compile-macro">
		<attribute name="srcdir" default="${main.src.dir}" />
		<attribute name="destdir" default="${main.classes.dir}" />
		<attribute name="classpath" default="lib.classpath" />

		<sequential>
			<javac debug="${compile.debug}"
			       deprecation="${compile.deprecation}"
			       destdir="@{destdir}"
			       target="1.3"
			       source="1.3"
			       optimize="${compile.optimize}"
			       srcdir="@{srcdir}"
			>
				<classpath refid="@{classpath}" />
			</javac>
		</sequential>
	</macrodef>

	<target name="compile-main" description="Compile main source" depends="set-up">
		<compile-macro />
	</target>

	<target name="compile-test" description="Compile test source" depends="compile-main">
		<compile-macro srcdir="${test.src.dir}"
		               destdir="${test.classes.dir}"
		               classpath="main.classpath"
		/>
	</target>

	<macrodef name="test-macro">
		<attribute name="classpath" default="test.classpath" />

		<sequential>
			<junit printsummary="no"
			       errorProperty="test.failed"
			       failureProperty="test.failed"
			       fork="true"
			>
				<classpath refid="@{classpath}" />
				<classpath refid="test.srcpath" />

				<formatter type="xml" />
				<formatter type="brief" usefile="false" />

				<batchtest todir="${test.results.dir}" unless="testcase">
					<fileset dir="${test.classes.dir}"
					         includes="**/*Test.class"
					         excludes="**/*$$*.class"
					/>
				</batchtest>

				<batchtest todir="${test.results.dir}" if="testcase">
					<fileset dir="${test.classes.dir}" includes="**/${testcase}.class" />
				</batchtest>
			</junit>

			<fail if="test.failed">Unit tests failed.</fail>
		</sequential>
	</macrodef>

	<target name="test" description="Run the test suite." depends="compile-test">
		<test-macro />
	</target>

	<!-- ========== Begin: Documentation targets ========== -->

	<!-- Clover code coverage targets -->
	<target name="coverage" depends="compile-test">
		<!-- Compile test classes first prior to turning the instrumentation on; hence the
             dependency on "compile-test". -->

		<!-- Import Clover tasks and types -->
		<taskdef resource="clovertasks" />
		<typedef resource="clovertypes" />

		<!-- Turn Clover instrumentation on -->
		<clover-setup initString="${coverage.db.dir}/coverage.db" />

		<!-- Instrument framework classes -->
		<compile-macro destdir="${coverage.classes.dir}" />

		<path id="coverage.classpath">
			<pathelement location="${ant.home}/lib/clover.jar" />
			<pathelement path="${coverage.classes.dir}" />
			<path refid="test.classpath" />
			<path refid="test.srcpath" />
		</path>

		<!-- Run framework test cases -->
		<test-macro classpath="coverage.classpath" />

		<!-- Generate Clover report -->
		<clover-report>
			<current title="${component.title} - Release ${component.version}"
			         outfile="${docs.build.dir}/coverage"
			>
				<format type="html" />
			</current>
		</clover-report>

		<!-- Disable Clover instrumentation -->
		<clover-setup enabled="no" />
	</target>

	<!-- Javadoc target -->
	<target name="javadoc" description="Build Javadoc documentation" depends="compile-main">
		<mkdir dir="${docs.build.dir}/api" />

		<javadoc author="true"
		         destdir="${docs.build.dir}/api"
		         source="1.3"
		         doctitle="${component.title}"
		         packagenames="gravity.*"
		         sourcepathref="main.srcpath"
		         classpathref="main.classpath"
		         version="true"
		         windowtitle="${component.title} (Version ${component.version})"
		         Overview="${main.src.dir}/overview.html"
		/>
	</target>

	<!-- User's Manual targets - borrowed from dynaop -->

	<target name="untar.docbook" unless="docbook.untarred">
		<property name="docbook.tgz" value="${manual.src.dir}/${docbook.basename}.tar.gz" />
		<untar src="${docbook.tgz}" dest="${docs.build.dir}" compression="gzip" />
	</target>

	<target name="is.docbook.untarred">
		<available property="docbook.untarred" file="${docs.build.dir}/${docbook.basename}" />
	</target>

	<target name="manual-render" depends="is.docbook.untarred, untar.docbook">
		<delete dir="${manual.build.dir}" />
		<mkdir dir="${manual.build.dir}" />

		<copy toDir="${manual.build.dir}">
			<fileset dir="${manual.src.dir}" excludes="*.xml,*.gz,*.xsl, listings/" />
		</copy>

		<copy toDir="${docs.build.dir}/${docbook.basename}" file="${manual.src.dir}/manual.xsl" />

		<java dir="${manual.build.dir}" fork="true" jar="${lib.dir}/saxon.jar">
			<arg value="../../../${manual.src.dir}/manual.xml" />
			<arg value="../${docbook.basename}/manual.xsl" />
		</java>
	</target>

	<target name="manual" description="Generate User's Guide." depends="set-up, manual-render" />

	<!-- ========== End: Documentation targets ========== -->

	<macrodef name="jar-macro">
		<attribute name="includes" default="**/*" />
		<attribute name="excludes" default="" />
		<attribute name="extension" default="" />

		<sequential>
			<mkdir dir="${dist.dir}" />

			<copy file="LICENSE" todir="${main.classes.dir}" />

			<jar basedir="${main.classes.dir}"
			     jarfile="${dist.dir}/${component.package}@{extension}-${component.version}.jar"
			     includes="@{includes}"
			     excludes="@{excludes}"
			/>
		</sequential>
	</macrodef>

	<target name="jar-sub">
		<jar-macro />
	</target>

	<target name="jar" description="Create binary distribution" depends="compile-main, jar-sub" />

	<target name="all" depends="clean, coverage, javadoc, manual, jar" />

	<target name="dist" depends="set-up">
		<copy todir="${www.dir}/docs">
			<fileset dir="${docs.build.dir}" includes="**" excludes="${docbook.basename}/" />
		</copy>
	</target>
</project>