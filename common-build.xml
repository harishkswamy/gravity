<?xml version="1.0"?>
<!--
    Copyright 2004 The Apache Software Foundation
    
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    
        http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!-- $Id: common-build.xml,v 1.2 2004-05-11 20:39:58 harishkswamy Exp $ -->
<project name="common-build" basedir="." default="coverage">

    <!-- ========== Executable Targets ======================================== -->

    <target name="pre-init" />

    <target name="init" description="Initialize environment" depends="pre-init">

        <!-- read properties from the build.properties, if any -->

        <property file="build.properties" />

        <property name="src.dir" value="src" />

        <property name="main.src.dir" value="${src.dir}/main" />
        <property name="test.src.dir" value="${src.dir}/test" />

        <property name="lib.dir" value="lib" />

        <property name="build.dir" value="build" />

        <property name="main.build.dir" value="${build.dir}/main" />
        <property name="test.build.dir" value="${build.dir}/test" />

        <property name="main.classes.dir" value="${main.build.dir}/classes" />
        <property name="test.classes.dir" value="${test.build.dir}/classes" />

        <property name="test.results.dir" value="${test.build.dir}/results" />

        <!--property name="build.compiler" value="javac1.3" /-->
        <property name="compile.debug" value="true" />
        <property name="compile.deprecation" value="true" />
        <property name="compile.optimize" value="true" />

        <property name="docs.dir" value="docs" />

        <property name="coverage.build.dir" value="${test.build.dir}/coverage" />
        <property name="coverage.classes.dir" value="${coverage.build.dir}/classes" />
        <property name="coverage.db.dir" value="${coverage.build.dir}/db" />

        <property name="web.dir" value="web" />

        <property name="dist.dir" value="dist" />

        <path id="lib.classpath">
            <fileset dir="${lib.dir}" includes="*.jar" />
        </path>

        <path id="main.srcpath">
            <pathelement path="${main.src.dir}" />
        </path>

        <path id="main.classpath">
            <path refid="lib.classpath" />
            <pathelement path="${main.classes.dir}" />
        </path>

        <path id="test.srcpath">
            <pathelement path="${test.src.dir}" />
        </path>

        <path id="test.classpath">
            <path refid="main.classpath" />
            <pathelement path="${test.classes.dir}" />
        </path>

        <property name="test.classpath" value="test.classpath" />

        <antcall target="post-init" />
    </target>

    <target name="post-init" />

    <target name="pre-clean" />

    <target name="clean" description="Cleanup the build space" depends="init, pre-clean">
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
        <delete dir="${web.dir}" />

        <antcall target="post-clean" />
    </target>

    <target name="post-clean" />

    <target name="pre-set-up" />

    <target name="set-up" description="Prepare build space" depends="init, pre-set-up">
        <mkdir dir="${main.classes.dir}" />
        <mkdir dir="${test.classes.dir}" />
        <mkdir dir="${test.results.dir}" />

        <mkdir dir="${coverage.classes.dir}" />
        <mkdir dir="${coverage.db.dir}" />

        <antcall target="post-set-up" />
    </target>

    <target name="post-set-up" />

    <target name="compile-main" description="Compile main source" depends="set-up">
        <javac debug="${compile.debug}"
               deprecation="${compile.deprecation}"
               destdir="${main.classes.dir}"
               target="1.3"
               source="1.3"
               optimize="${compile.optimize}"
               srcdir="${main.src.dir}"
        >
            <classpath refid="lib.classpath" />
        </javac>
    </target>

    <target name="compile-test" description="Compile test source" depends="compile-main">
        <javac debug="${compile.debug}"
               deprecation="${compile.deprecation}"
               destdir="${test.classes.dir}"
               target="1.3"
               source="1.3"
               optimize="${compile.optimize}"
               srcdir="${test.src.dir}"
        >
            <classpath refid="main.classpath" />
        </javac>
    </target>

    <target name="test" description="Run the test suite." depends="compile-test">
        <junit printsummary="no" errorProperty="test.failed" failureProperty="test.failed" fork="true">
            <classpath refid="${test.classpath}" />
            <classpath refid="test.srcpath" />

            <formatter type="xml" />
            <formatter type="brief" usefile="false" />

            <batchtest todir="${test.results.dir}" unless="testcase">
                <fileset dir="${test.classes.dir}" includes="**/*Test.class" excludes="**/*$$*.class" />
            </batchtest>

            <batchtest todir="${test.results.dir}" if="testcase">
                <fileset dir="${test.classes.dir}" includes="**/${testcase}.class" />
            </batchtest>
        </junit>

        <fail if="test.failed">Unit tests failed.</fail>
    </target>

    <!-- ========== Begin: Documentation targets ========== -->

    <!-- Clover code coverage targets -->
    <target name="coverage-data" depends="compile-test">
        <taskdef resource="clovertasks" />
        <typedef resource="clovertypes" />

        <clover-setup initString="${coverage.db.dir}/coverage.db" />

        <antcall target="compile-main">
            <param name="main.classes.dir" value="${coverage.classes.dir}" />
        </antcall>

        <path id="coverage.classpath">
            <pathelement location="${ant.home}/lib/clover.jar" />
            <pathelement path="${coverage.classes.dir}" />
            <path refid="test.classpath" />
            <path refid="test.srcpath" />
        </path>

        <antcall target="test">
            <param name="test.classpath" value="coverage.classpath" />
        </antcall>
    </target>

    <target name="coverage" depends="coverage-data">
        <clover-report>
            <current title="${component.title} - Release ${component.version}" outfile="${web.dir}/docs/clover">
                <format type="html" />
            </current>
        </clover-report>

        <clover-setup enabled="no" />
    </target>

    <!-- Javadoc target -->
    <target name="javadoc" description="Build Javadoc documentation" depends="compile-main">
        <mkdir dir="${web.dir}/docs/api" />

        <javadoc author="true"
                 destdir="${web.dir}/docs/api"
                 source="1.3"
                 doctitle="${component.title}"
                 packagenames="gravity.*"
                 access="public"
                 sourcepathref="main.srcpath"
                 classpathref="main.classpath"
                 version="true"
                 windowtitle="${component.title} (Version ${component.version})"
                 Overview="${main.src.dir}/overview.html"
        />
    </target>

    <!-- ========== End: Documentation targets ========== -->

    <target name="jar" description="Create binary distribution" depends="compile-main">
        <mkdir dir="${dist.dir}" />

        <copy file="LICENSE" todir="${main.classes.dir}" />

        <jar basedir="${main.classes.dir}" jarfile="${dist.dir}/${component.package}-${component.version}.jar">
            <include name="**/*" />
        </jar>
    </target>

    <target name="all" depends="clean, coverage, javadoc, jar" />

</project>